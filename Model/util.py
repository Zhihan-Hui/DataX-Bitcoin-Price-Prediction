
import numpy as np
import time

# adapted from https://stackoverflow.com/a/41872444
def patchify(data: np.ndarray, size: int) -> np.ndarray:
    """
    Input:
    - data: shape (*, X) where * denotes arbitrary number of dimensions
    - size: size of patches to form from data
    Output:
    - patches: shape (*, 1, size*(data.ndim-1), X)
    """
    data = np.pad(data, [[size//2, size//2]] * (data.ndim - 1) + [[0, 0]])
    shape = [s - size + 1 for s in data.shape[:-1]] + [1] + [size] * (data.ndim - 1) + [data.shape[-1]]
    strides = data.strides * 2
    patches = np.lib.stride_tricks.as_strided(data, shape=shape, strides=strides)
    return patches

def ohlc_aggregate(price: np.ndarray, interval: int) -> np.ndarray:
    """
    Input:
    - price: shape (N*interval, 4)
    - interval: interval to aggregate. ex: minute->hour is 60, hour->day is 24.
    Output:
    - aggr_price: shape (N, 4)
    """
    price = price.reshape((-1, interval, 4))
    o, h, l, c = np.split(price, 4, axis=-1)
    aggr_price = np.concatenate([
        o[:, 0],
        h.max(axis=1),
        l.min(axis=1),
        c[:, -1]
    ], axis=-1)
    return aggr_price

def tweet_std():
    return np.array([1.0, 1.0, 1.0,
        0.291, 0.511, 0.1712, 0.2243, 0.3156, 0.4451, 0.2257, 0.4682,
        0.4547, 0.276, 0.3889, 0.2237, 0.1913, 0.2879, 0.2145, 0.3295,
        0.2892, 0.2628, 0.2939, 0.3503, 0.2317, 0.3857, 0.3928, 0.2614,
        0.2357, 0.308, 0.5181, 0.2413, 0.3327, 0.5825, 0.3951, 0.2733,
        0.471, 0.2296, 0.2193, 0.2439, 0.2256, 0.3979, 0.5685, 0.2233,
        0.4172, 0.2503, 0.2824, 0.2331, 0.2277, 0.4175, 0.2391, 0.5123,
        0.3709, 0.4673, 0.2468, 0.3948, 0.288, 0.3142, 0.2426, 0.3302,
        0.1862, 0.4512, 0.5108, 0.3753, 0.4018, 0.4063, 0.6424, 0.4439,
        0.2262, 0.2787, 0.3176, 0.4429, 0.4542, 0.3509, 0.2871, 0.1876,
        0.2804, 0.3831, 0.2717, 0.388, 0.402, 0.329, 0.3833, 0.2701,
        0.3553, 0.2132, 0.5868, 0.4115, 0.2795, 0.3432, 0.2435, 0.2412,
        0.2202, 0.3983, 0.4213, 0.2689, 0.2572, 0.3368, 0.2557, 0.5124,
        0.3076, 0.7062, 0.357, 0.2906, 0.2233, 0.2373, 0.5484, 0.2364,
        0.4177, 0.5532, 0.2699, 0.3347, 0.2008, 0.267, 0.4158, 0.6665,
        0.6058, 0.2772, 0.2171, 0.2265, 0.3291, 0.2282, 0.2007, 0.5881,
        0.1778, 0.2421, 0.3764, 0.2528, 0.3491, 0.3822, 0.578, 0.2962,
        0.2153, 0.3123, 0.3669, 0.3946, 0.1998, 0.3802, 0.3841, 0.1623,
        0.1999, 0.1935, 0.263, 0.2534, 0.4441, 0.2524, 0.3355, 0.3519,
        0.355, 0.3062, 0.2266, 0.2201, 0.4512, 0.2597, 0.3337, 0.212,
        0.2216, 0.2063, 0.5633, 0.4508, 0.3955, 0.4166, 0.2274, 0.2926,
        0.6786, 0.3048, 0.3086, 0.4117, 0.4226, 0.2167, 0.2219, 0.229,
        0.1832, 0.2799, 0.5189, 0.3731, 0.3499, 0.3312, 0.2606, 0.4933,
        0.2627, 0.5872, 0.3924, 0.1825, 0.3579, 0.2849, 0.4371, 0.3417,
        0.2525, 0.4907, 0.2381, 0.2099, 0.3055, 0.2807, 0.3078, 0.2806,
        0.2254, 0.2373, 0.2206, 0.2869, 0.3422, 0.1972, 0.3256, 0.2372,
        0.3211, 0.2547, 0.4177, 0.3934, 0.5, 0.3547, 0.5798, 0.2074,
        0.432, 0.3231, 0.2423, 0.4531, 0.3521, 0.2444, 0.2766, 0.4405,
        0.2785, 0.4416, 0.4712, 0.2382, 0.2583, 0.2686, 0.3322, 0.2168,
        0.4756, 0.2903, 0.2807, 0.3742, 0.3482, 0.3343, 0.2005, 0.3089,
        0.3092, 0.3386, 0.3453, 0.438, 0.4243, 0.1831, 0.3131, 0.2074,
        1.0583, 0.1727, 0.2055, 0.2317, 0.2986, 0.3233, 0.3493, 0.7577,
        0.2626, 0.2991, 0.1903, 0.3692, 0.2412, 0.1902, 0.5304, 0.3655,
        0.3384, 0.2914, 0.3247, 0.5412, 0.2745, 0.2257, 0.3535, 0.3313,
        0.2267, 0.3714, 0.2309, 0.1749, 0.4915, 0.2464, 0.1959, 0.2715,
        0.3702, 0.1984, 0.3915, 0.4063, 0.4507, 0.285, 0.3947, 0.196,
        0.2486, 0.347, 0.2857, 0.4538, 0.6362, 0.458, 0.5606, 0.2452,
        0.259, 0.3945, 0.4253, 0.2467, 0.5815, 0.2929, 0.3355, 0.2172,
        0.2156, 0.2709, 0.2238, 0.3423, 0.3591, 0.3848, 0.403, 0.1997,
        0.2177, 0.2432, 0.2273, 0.3125, 0.2606, 0.3167, 0.4074, 0.2584,
        0.1766, 0.322, 0.2277, 0.3781, 0.3061, 0.4715, 0.4092, 0.2648,
        0.2521, 0.2247, 0.4844, 0.445, 0.4889, 0.5509, 0.4404, 0.3171,
        0.4134, 0.2691, 0.613, 0.422, 0.2424, 0.3314, 0.2557, 0.2188,
        0.4025, 0.2302, 0.4965, 0.2878, 0.4945, 0.4735, 0.3089, 0.3076,
        0.3297, 0.2486, 0.3983, 0.2068, 0.4031, 0.3767, 0.9165, 0.3524,
        0.287, 0.3358, 0.1924, 0.2246, 0.2226, 0.302, 0.2722, 0.9712,
        0.4076, 0.4748, 0.3508, 0.423, 0.4156, 0.3645, 0.5826, 0.3877,
        0.6946, 0.4489, 0.2814, 0.2283, 0.2929, 0.2779, 0.1949, 0.3347,
        0.2228, 0.1789, 0.2431, 0.3225, 0.2684, 0.207, 0.2958, 0.2847,
        0.5579, 0.2825, 0.2614, 0.5365, 0.6127, 0.2108, 0.2434, 0.2991,
        0.1686, 0.3814, 0.3149, 0.1974, 0.4378, 1.143, 0.2595, 0.4246,
        0.291, 0.2659, 0.2419, 0.4808, 0.2951, 0.2203, 0.4785, 0.1915,
        0.2805, 0.4199, 0.1619, 0.31, 0.1726, 0.5223, 0.2619, 0.1871,
        0.3552, 0.371, 0.3059, 0.3071, 0.1939, 0.3151, 0.315, 0.3211,
        0.2238, 0.3523, 0.2672, 0.2175, 0.3095, 0.2061, 0.3279, 0.2342,
        0.5406, 0.2027, 0.3479, 0.2462, 0.2487, 0.4352, 0.2719, 0.4699,
        0.2561, 0.258, 0.3807, 0.298, 0.6718, 0.1812, 0.3823, 0.23,
        0.6188, 0.3152, 0.2516, 0.4368, 0.4786, 0.4486, 0.2689, 0.3893,
        0.2391, 0.2398, 0.2324, 0.2119, 0.2411, 0.3164, 0.3358, 0.2795,
        0.2592, 0.3968, 0.3885, 0.3258, 0.5138, 0.2376, 0.6899, 0.2012,
        0.2694, 0.3673, 0.2679, 0.2667, 0.349, 0.3111, 0.3639, 0.2834,
        0.2733, 0.3043, 0.3319, 0.1886, 0.1464, 0.3061, 0.4739, 0.2932,
        0.2037, 0.2841, 0.3589, 0.3246, 0.2596, 0.4336, 0.2247, 0.4034,
        0.6442, 0.3901, 0.2621, 0.2494, 0.1599, 0.2884, 0.4146, 0.3845,
        0.2126, 0.2819, 0.396, 0.1684, 0.649, 0.2328, 0.3964, 0.3352,
        0.5989, 0.2475, 0.2374, 0.1909, 0.3661, 0.2437, 0.5504, 0.7587,
        0.2129, 0.2684, 0.2208, 0.2816, 0.1976, 0.2832, 0.2689, 0.3669,
        0.4433, 0.3168, 0.2089, 0.279, 0.2489, 0.3059, 0.3926, 0.2179,
        0.6721, 0.2777, 0.5168, 0.2594, 0.3729, 0.2453, 0.3526, 0.2124,
        0.2466, 0.4369, 0.2572, 0.2359, 0.2619, 0.3062, 0.2776, 0.5399,
        0.4346, 0.328, 0.4396, 0.2491, 0.3223, 0.2546, 0.2627, 0.2488,
        0.2789, 0.5735, 0.2924, 0.2797, 0.7105, 0.2399, 0.4125, 0.3997,
        0.3973, 0.2904, 0.7914, 0.2352, 0.189, 0.5821, 0.2633, 0.2217,
        0.2452, 0.5026, 0.5155, 0.2425, 0.1973, 0.2181, 0.3166, 0.3297,
        0.3415, 0.2895, 1.0276, 0.512, 3.5068, 0.299, 0.1939, 0.2522,
        0.3889, 0.6115, 0.1587, 0.5416, 0.4309, 0.1887, 0.2391, 0.3465,
        0.3145, 0.3247, 0.273, 0.2277, 0.3889, 0.2312, 0.3129, 0.2973,
        0.3533, 0.4356, 0.3501, 0.4331, 0.1702, 0.5269, 0.2579, 0.284,
        0.2603, 0.5127, 0.1913, 0.3775, 0.2728, 0.2832, 0.286, 0.2084,
        0.4425, 0.1885, 0.5105, 0.3471, 0.2638, 0.33, 0.229, 0.5049,
        0.1738, 0.2953, 0.3802, 0.2592, 0.2925, 0.4338, 0.1831, 0.2229,
        0.25, 0.4504, 0.3038, 0.3178, 0.3169, 0.4695, 0.1977, 0.3494,
        0.4375, 0.4875, 0.2277, 0.2616, 0.2639, 0.2431, 0.2194, 0.3635,
        0.4177, 0.3382, 0.2517, 0.6846, 0.2081, 0.2708, 0.3721, 0.3465,
        0.3777, 0.2296, 0.4505, 0.3935, 0.2032, 0.2135, 0.2252, 0.3849,
        0.3657, 0.2005, 0.4296, 0.2258, 0.2807, 0.4201, 0.3813, 0.2367,
        0.2718, 0.2545, 0.4801, 0.3238, 0.2414, 0.2947, 0.2454, 0.2811,
        0.2817, 0.4472, 0.1811, 0.4443, 0.4014, 0.2188, 0.5662, 0.2343,
        0.4029, 0.2963, 0.2279, 0.2461, 0.2858, 0.2764, 0.4111, 0.2052,
        0.3231, 0.4629, 0.1936, 0.3209, 0.2411, 0.236, 0.3927, 0.4673,
        0.2497, 0.3991, 0.4309, 0.3147, 0.3135, 0.2304, 0.7138, 0.5627,
        0.5893, 0.2436, 0.3554, 0.3184, 0.3321, 0.1735, 0.6302, 0.3086,
        0.275, 0.2637, 0.3573, 0.4658, 0.1877, 0.3055, 0.2282, 0.3697,
        0.2487, 0.5361, 0.3035, 0.2264, 0.5234, 0.3741, 0.2779, 0.3305,
        0.2567, 0.2195, 0.319, 0.246, 0.3434, 0.3867, 0.5285, 0.2454,
        0.3896, 0.1853, 0.4872, 0.1863, 0.5624, 0.5183, 0.2789, 0.2022,
        0.2499, 0.2115, 0.2355, 0.2952, 0.4387, 0.4939, 0.1901, 0.4281,
    ], dtype=np.float32)


class Profiler():
    def __init__(self, names=['main']):
        self.names = names
        self.lasts = {k: 0 for k in names}
        self.totals = self.lasts.copy()
        self.counts = self.lasts.copy()
        self.means = self.lasts.copy()
        self.reset()

    def reset(self):
        last = time.time()
        for name in self.names:
            self.lasts[name] = last
            self.totals[name] = 0
            self.counts[name] = 0
            self.means[name] = 0

    def start(self, name='main'):
        self.lasts[name] = time.time()

    def stop(self, name='main'):
        self.totals[name] += time.time() - self.lasts[name]
        self.counts[name] += 1
        self.means[name] = self.totals[name] / self.counts[name]

    def bump(self, name='main'):
        self.stop(name)
        self.start(name)
